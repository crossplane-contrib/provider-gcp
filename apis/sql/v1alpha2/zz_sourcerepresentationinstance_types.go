/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceRepresentationInstanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SourceRepresentationInstanceParameters struct {

	// The MySQL version running on your source database server. Possible values: ["MYSQL_5_5", "MYSQL_5_6", "MYSQL_5_7", "MYSQL_8_0"]
	// +kubebuilder:validation:Required
	DatabaseVersion *string `json:"databaseVersion" tf:"database_version,omitempty"`

	// The externally accessible IPv4 address for the source database server.
	// +kubebuilder:validation:Required
	Host *string `json:"host" tf:"host,omitempty"`

	// The externally accessible port for the source database server.
	// Defaults to 3306.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Region in which the created instance should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// SourceRepresentationInstanceSpec defines the desired state of SourceRepresentationInstance
type SourceRepresentationInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourceRepresentationInstanceParameters `json:"forProvider"`
}

// SourceRepresentationInstanceStatus defines the observed state of SourceRepresentationInstance.
type SourceRepresentationInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourceRepresentationInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SourceRepresentationInstance is the Schema for the SourceRepresentationInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type SourceRepresentationInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SourceRepresentationInstanceSpec   `json:"spec"`
	Status            SourceRepresentationInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourceRepresentationInstanceList contains a list of SourceRepresentationInstances
type SourceRepresentationInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SourceRepresentationInstance `json:"items"`
}

// Repository type metadata.
var (
	SourceRepresentationInstance_Kind             = "SourceRepresentationInstance"
	SourceRepresentationInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SourceRepresentationInstance_Kind}.String()
	SourceRepresentationInstance_KindAPIVersion   = SourceRepresentationInstance_Kind + "." + CRDGroupVersion.String()
	SourceRepresentationInstance_GroupVersionKind = CRDGroupVersion.WithKind(SourceRepresentationInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&SourceRepresentationInstance{}, &SourceRepresentationInstanceList{})
}
