/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizedNetworksObservation struct {
}

type AuthorizedNetworksParameters struct {

	// +kubebuilder:validation:Optional
	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type BackupConfigurationObservation struct {
}

type BackupConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	BackupRetentionSettings []BackupRetentionSettingsParameters `json:"backupRetentionSettings,omitempty" tf:"backup_retention_settings,omitempty"`

	// True if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Cannot be used with Postgres.
	// +kubebuilder:validation:Optional
	BinaryLogEnabled *bool `json:"binaryLogEnabled,omitempty" tf:"binary_log_enabled,omitempty"`

	// True if backup configuration is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Location of the backup configuration.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// True if Point-in-time recovery is enabled.
	// +kubebuilder:validation:Optional
	PointInTimeRecoveryEnabled *bool `json:"pointInTimeRecoveryEnabled,omitempty" tf:"point_in_time_recovery_enabled,omitempty"`

	// HH:MM format time indicating when backup configuration starts.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	// +kubebuilder:validation:Optional
	TransactionLogRetentionDays *float64 `json:"transactionLogRetentionDays,omitempty" tf:"transaction_log_retention_days,omitempty"`
}

type BackupRetentionSettingsObservation struct {
}

type BackupRetentionSettingsParameters struct {

	// Number of backups to retain.
	// +kubebuilder:validation:Required
	RetainedBackups *float64 `json:"retainedBackups" tf:"retained_backups,omitempty"`

	// The unit that 'retainedBackups' represents. Defaults to COUNT
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`
}

type CloneObservation struct {
}

type CloneParameters struct {

	// The timestamp of the point in time that should be restored.
	// +kubebuilder:validation:Optional
	PointInTime *string `json:"pointInTime,omitempty" tf:"point_in_time,omitempty"`

	// The name of the instance from which the point in time should be restored.
	// +kubebuilder:validation:Required
	SourceInstanceName *string `json:"sourceInstanceName" tf:"source_instance_name,omitempty"`
}

type DatabaseFlagsObservation struct {
}

type DatabaseFlagsParameters struct {

	// Name of the flag.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Value of the flag.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type DatabaseInstanceObservation struct {
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	FirstIPAddress *string `json:"firstIpAddress,omitempty" tf:"first_ip_address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddress []IPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	PublicIPAddress *string `json:"publicIpAddress,omitempty" tf:"public_ip_address,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	ServerCACert []ServerCACertObservation `json:"serverCaCert,omitempty" tf:"server_ca_cert,omitempty"`

	ServiceAccountEmailAddress *string `json:"serviceAccountEmailAddress,omitempty" tf:"service_account_email_address,omitempty"`
}

type DatabaseInstanceParameters struct {

	// Configuration for creating a new instance as a clone of another instance.
	// +kubebuilder:validation:Optional
	Clone []CloneParameters `json:"clone,omitempty" tf:"clone,omitempty"`

	// The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, SQLSERVER_2017_STANDARD, SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB. Database Version Policies includes an up-to-date reference of supported versions.
	// +kubebuilder:validation:Required
	DatabaseVersion *string `json:"databaseVersion" tf:"database_version,omitempty"`

	// Used to block Terraform from deleting a SQL Instance.
	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// The name of the instance that will act as the master in the replication setup. Note, this requires the master to have binary_log_enabled set, as well as existing backups.
	// +kubebuilder:validation:Optional
	MasterInstanceName *string `json:"masterInstanceName,omitempty" tf:"master_instance_name,omitempty"`

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region the instance will sit in. Note, Cloud SQL is not available in all regions. A valid region must be provided to use this resource. If a region is not provided in the resource definition, the provider region will be used instead, but this will be an apply-time error for instances if the provider region is not supported with Cloud SQL. If you choose not to provide the region argument for this resource, make sure you understand this.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The configuration for replication.
	// +kubebuilder:validation:Optional
	ReplicaConfiguration []ReplicaConfigurationParameters `json:"replicaConfiguration,omitempty" tf:"replica_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	RestoreBackupContext []RestoreBackupContextParameters `json:"restoreBackupContext,omitempty" tf:"restore_backup_context,omitempty"`

	// Initial root password. Required for MS SQL Server, ignored by MySQL and PostgreSQL.
	// +kubebuilder:validation:Optional
	RootPasswordSecretRef *v1.SecretKeySelector `json:"rootPasswordSecretRef,omitempty" tf:"-"`

	// The settings to use for the database. The configuration is detailed below.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type IPAddressObservation struct {
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	TimeToRetire *string `json:"timeToRetire,omitempty" tf:"time_to_retire,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPAddressParameters struct {
}

type IPConfigurationObservation struct {
}

type IPConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizedNetworks []AuthorizedNetworksParameters `json:"authorizedNetworks,omitempty" tf:"authorized_networks,omitempty"`

	// Whether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.
	// +kubebuilder:validation:Optional
	IPv4Enabled *bool `json:"ipv4Enabled,omitempty" tf:"ipv4_enabled,omitempty"`

	// The VPC network from which the Cloud SQL instance is accessible for private IP. For example, projects/myProject/global/networks/default. Specifying a network enables private IP. At least ipv4_enabled must be enabled or a private_network must be configured. This setting can be updated, but it cannot be removed after it is set.
	// +kubebuilder:validation:Optional
	PrivateNetwork *string `json:"privateNetwork,omitempty" tf:"private_network,omitempty"`

	// +kubebuilder:validation:Optional
	RequireSSL *bool `json:"requireSsl,omitempty" tf:"require_ssl,omitempty"`
}

type InsightsConfigObservation struct {
}

type InsightsConfigParameters struct {

	// True if Query Insights feature is enabled.
	// +kubebuilder:validation:Optional
	QueryInsightsEnabled *bool `json:"queryInsightsEnabled,omitempty" tf:"query_insights_enabled,omitempty"`

	// Maximum query length stored in bytes. Between 256 and 4500. Default to 1024.
	// +kubebuilder:validation:Optional
	QueryStringLength *float64 `json:"queryStringLength,omitempty" tf:"query_string_length,omitempty"`

	// True if Query Insights will record application tags from query when enabled.
	// +kubebuilder:validation:Optional
	RecordApplicationTags *bool `json:"recordApplicationTags,omitempty" tf:"record_application_tags,omitempty"`

	// True if Query Insights will record client address when enabled.
	// +kubebuilder:validation:Optional
	RecordClientAddress *bool `json:"recordClientAddress,omitempty" tf:"record_client_address,omitempty"`
}

type LocationPreferenceObservation struct {
}

type LocationPreferenceParameters struct {

	// A Google App Engine application whose zone to remain in. Must be in the same region as this instance.
	// +kubebuilder:validation:Optional
	FollowGaeApplication *string `json:"followGaeApplication,omitempty" tf:"follow_gae_application,omitempty"`

	// The preferred compute engine zone.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type MaintenanceWindowObservation struct {
}

type MaintenanceWindowParameters struct {

	// Day of week (1-7), starting on Monday
	// +kubebuilder:validation:Optional
	Day *float64 `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of day (0-23), ignored if day not set
	// +kubebuilder:validation:Optional
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Receive updates earlier (canary) or later (stable)
	// +kubebuilder:validation:Optional
	UpdateTrack *string `json:"updateTrack,omitempty" tf:"update_track,omitempty"`
}

type ReplicaConfigurationObservation struct {
}

type ReplicaConfigurationParameters struct {

	// PEM representation of the trusted CA's x509 certificate.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// PEM representation of the replica's x509 certificate.
	// +kubebuilder:validation:Optional
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// PEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate.
	// +kubebuilder:validation:Optional
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// The number of seconds between connect retries.
	// +kubebuilder:validation:Optional
	ConnectRetryInterval *float64 `json:"connectRetryInterval,omitempty" tf:"connect_retry_interval,omitempty"`

	// Path to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename.
	// +kubebuilder:validation:Optional
	DumpFilePath *string `json:"dumpFilePath,omitempty" tf:"dump_file_path,omitempty"`

	// Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance.
	// +kubebuilder:validation:Optional
	FailoverTarget *bool `json:"failoverTarget,omitempty" tf:"failover_target,omitempty"`

	// Time in ms between replication heartbeats.
	// +kubebuilder:validation:Optional
	MasterHeartbeatPeriod *float64 `json:"masterHeartbeatPeriod,omitempty" tf:"master_heartbeat_period,omitempty"`

	// Password for the replication connection.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Permissible ciphers for use in SSL encryption.
	// +kubebuilder:validation:Optional
	SSLCipher *string `json:"sslCipher,omitempty" tf:"ssl_cipher,omitempty"`

	// Username for replication connection.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// True if the master's common name value is checked during the SSL handshake.
	// +kubebuilder:validation:Optional
	VerifyServerCertificate *bool `json:"verifyServerCertificate,omitempty" tf:"verify_server_certificate,omitempty"`
}

type RestoreBackupContextObservation struct {
}

type RestoreBackupContextParameters struct {

	// The ID of the backup run to restore from.
	// +kubebuilder:validation:Required
	BackupRunID *float64 `json:"backupRunId" tf:"backup_run_id,omitempty"`

	// The ID of the instance that the backup was taken from.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The full project ID of the source instance.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ServerCACertObservation struct {
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ExpirationTime *string `json:"expirationTime,omitempty" tf:"expiration_time,omitempty"`

	Sha1Fingerprint *string `json:"sha1Fingerprint,omitempty" tf:"sha1_fingerprint,omitempty"`
}

type ServerCACertParameters struct {
}

type SettingsObservation struct {
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type SettingsParameters struct {

	// This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.
	// +kubebuilder:validation:Optional
	ActivationPolicy *string `json:"activationPolicy,omitempty" tf:"activation_policy,omitempty"`

	// The availability type of the Cloud SQL instance, high availability
	// (REGIONAL) or single zone (ZONAL). For MySQL instances, ensure that
	// settings.backup_configuration.enabled and
	// settings.backup_configuration.binary_log_enabled are both set to true.
	// +kubebuilder:validation:Optional
	AvailabilityType *string `json:"availabilityType,omitempty" tf:"availability_type,omitempty"`

	// +kubebuilder:validation:Optional
	BackupConfiguration []BackupConfigurationParameters `json:"backupConfiguration,omitempty" tf:"backup_configuration,omitempty"`

	// The name of server instance collation.
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseFlags []DatabaseFlagsParameters `json:"databaseFlags,omitempty" tf:"database_flags,omitempty"`

	// Configuration to increase storage size automatically.  Note that future terraform apply calls will attempt to resize the disk to the value specified in disk_size - if this is set, do not set disk_size.
	// +kubebuilder:validation:Optional
	DiskAutoresize *bool `json:"diskAutoresize,omitempty" tf:"disk_autoresize,omitempty"`

	// The maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	// +kubebuilder:validation:Optional
	DiskAutoresizeLimit *float64 `json:"diskAutoresizeLimit,omitempty" tf:"disk_autoresize_limit,omitempty"`

	// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased.
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// The type of data disk: PD_SSD or PD_HDD.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// +kubebuilder:validation:Optional
	IPConfiguration []IPConfigurationParameters `json:"ipConfiguration,omitempty" tf:"ip_configuration,omitempty"`

	// Configuration of Query Insights.
	// +kubebuilder:validation:Optional
	InsightsConfig []InsightsConfigParameters `json:"insightsConfig,omitempty" tf:"insights_config,omitempty"`

	// +kubebuilder:validation:Optional
	LocationPreference []LocationPreferenceParameters `json:"locationPreference,omitempty" tf:"location_preference,omitempty"`

	// Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []MaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Pricing plan for this instance, can only be PER_USE.
	// +kubebuilder:validation:Optional
	PricingPlan *string `json:"pricingPlan,omitempty" tf:"pricing_plan,omitempty"`

	// The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
	// +kubebuilder:validation:Required
	Tier *string `json:"tier" tf:"tier,omitempty"`

	// A set of key/value user label pairs to assign to the instance.
	// +kubebuilder:validation:Optional
	UserLabels map[string]*string `json:"userLabels,omitempty" tf:"user_labels,omitempty"`
}

// DatabaseInstanceSpec defines the desired state of DatabaseInstance
type DatabaseInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseInstanceParameters `json:"forProvider"`
}

// DatabaseInstanceStatus defines the observed state of DatabaseInstance.
type DatabaseInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseInstance is the Schema for the DatabaseInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DatabaseInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseInstanceSpec   `json:"spec"`
	Status            DatabaseInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseInstanceList contains a list of DatabaseInstances
type DatabaseInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseInstance `json:"items"`
}

// Repository type metadata.
var (
	DatabaseInstance_Kind             = "DatabaseInstance"
	DatabaseInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseInstance_Kind}.String()
	DatabaseInstance_KindAPIVersion   = DatabaseInstance_Kind + "." + CRDGroupVersion.String()
	DatabaseInstance_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseInstance{}, &DatabaseInstanceList{})
}
