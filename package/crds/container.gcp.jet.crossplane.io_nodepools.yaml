---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: nodepools.container.gcp.jet.crossplane.io
spec:
  group: container.gcp.jet.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - gcpjet
    kind: NodePool
    listKind: NodePoolList
    plural: nodepools
    singular: nodepool
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: NodePool is the Schema for the NodePools API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NodePoolSpec defines the desired state of NodePool
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  autoscaling:
                    description: Configuration required by cluster autoscaler to adjust
                      the size of the node pool to the current cluster usage.
                    items:
                      properties:
                        maxNodeCount:
                          description: Maximum number of nodes in the NodePool. Must
                            be >= min_node_count.
                          type: number
                        minNodeCount:
                          description: Minimum number of nodes in the NodePool. Must
                            be >=0 and <= max_node_count.
                          type: number
                      required:
                      - maxNodeCount
                      - minNodeCount
                      type: object
                    type: array
                  cluster:
                    description: The cluster to create the node pool for. Cluster
                      must be present in location provided for zonal clusters.
                    type: string
                  clusterRef:
                    description: A Reference to a named object.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                    required:
                    - name
                    type: object
                  clusterSelector:
                    description: A Selector selects an object.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                    type: object
                  initialNodeCount:
                    description: The initial number of nodes for the pool. In regional
                      or multi-zonal clusters, this is the number of nodes per zone.
                      Changing this will force recreation of the resource.
                    type: number
                  location:
                    description: The location (region or zone) of the cluster.
                    type: string
                  management:
                    description: Node management configuration, wherein auto-repair
                      and auto-upgrade is configured.
                    items:
                      properties:
                        autoRepair:
                          description: Whether the nodes will be automatically repaired.
                          type: boolean
                        autoUpgrade:
                          description: Whether the nodes will be automatically upgraded.
                          type: boolean
                      type: object
                    type: array
                  maxPodsPerNode:
                    description: The maximum number of pods per node in this node
                      pool. Note that this does not work on node pools which are "route-based"
                      - that is, node pools belonging to clusters that do not have
                      IP Aliasing enabled.
                    type: number
                  nodeConfig:
                    description: The configuration of the nodepool
                    items:
                      properties:
                        diskSizeGb:
                          description: Size of the disk attached to each node, specified
                            in GB. The smallest allowed disk size is 10GB.
                          type: number
                        diskType:
                          description: Type of the disk attached to each node.
                          type: string
                        guestAccelerator:
                          description: List of the type and count of accelerator cards
                            attached to the instance.
                          items:
                            properties:
                              count:
                                type: number
                              gpuPartitionSize:
                                type: string
                              type:
                                type: string
                            type: object
                          type: array
                        imageType:
                          description: The image type to use for this node. Note that
                            for a given image type, the latest version of it will
                            be used.
                          type: string
                        labels:
                          additionalProperties:
                            type: string
                          description: The map of Kubernetes labels (key/value pairs)
                            to be applied to each node. These will added in addition
                            to any default label(s) that Kubernetes may apply to the
                            node.
                          type: object
                        localSsdCount:
                          description: The number of local SSD disks to be attached
                            to the node.
                          type: number
                        machineType:
                          description: The name of a Google Compute Engine machine
                            type.
                          type: string
                        metadata:
                          additionalProperties:
                            type: string
                          description: The metadata key/value pairs assigned to instances
                            in the cluster.
                          type: object
                        minCpuPlatform:
                          description: Minimum CPU platform to be used by this instance.
                            The instance may be scheduled on the specified or newer
                            CPU platform.
                          type: string
                        oauthScopes:
                          description: The set of Google API scopes to be made available
                            on all of the node VMs.
                          items:
                            type: string
                          type: array
                        preemptible:
                          description: Whether the nodes are created as preemptible
                            VM instances.
                          type: boolean
                        serviceAccount:
                          description: The Google Cloud Platform Service Account to
                            be used by the node VMs.
                          type: string
                        shieldedInstanceConfig:
                          description: Shielded Instance options.
                          items:
                            properties:
                              enableIntegrityMonitoring:
                                description: Defines whether the instance has integrity
                                  monitoring enabled.
                                type: boolean
                              enableSecureBoot:
                                description: Defines whether the instance has Secure
                                  Boot enabled.
                                type: boolean
                            type: object
                          type: array
                        tags:
                          description: The list of instance tags applied to all nodes.
                          items:
                            type: string
                          type: array
                        taint:
                          description: List of Kubernetes taints to be applied to
                            each node.
                          items:
                            properties:
                              effect:
                                type: string
                              key:
                                type: string
                              value:
                                type: string
                            type: object
                          type: array
                        workloadMetadataConfig:
                          description: The workload metadata configuration for this
                            node.
                          items:
                            properties:
                              mode:
                                description: Mode is the configuration for how to
                                  expose metadata to workloads running on the node.
                                type: string
                            required:
                            - mode
                            type: object
                          type: array
                      type: object
                    type: array
                  nodeCount:
                    description: The number of nodes per instance group. This field
                      can be used to update the number of nodes per instance group
                      but should not be used alongside autoscaling.
                    type: number
                  nodeLocations:
                    description: The list of zones in which the node pool's nodes
                      should be located. Nodes must be in the region of their regional
                      cluster or in the same region as their cluster's zone for zonal
                      clusters. If unspecified, the cluster-level node_locations will
                      be used.
                    items:
                      type: string
                    type: array
                  project:
                    description: The ID of the project in which to create the node
                      pool. If blank, the provider-configured project will be used.
                    type: string
                  upgradeSettings:
                    description: Specify node upgrade settings to change how many
                      nodes GKE attempts to upgrade at once. The number of nodes upgraded
                      simultaneously is the sum of max_surge and max_unavailable.
                      The maximum number of nodes upgraded simultaneously is limited
                      to 20.
                    items:
                      properties:
                        maxSurge:
                          description: The number of additional nodes that can be
                            added to the node pool during an upgrade. Increasing max_surge
                            raises the number of nodes that can be upgraded simultaneously.
                            Can be set to 0 or greater.
                          type: number
                        maxUnavailable:
                          description: The number of nodes that can be simultaneously
                            unavailable during an upgrade. Increasing max_unavailable
                            raises the number of nodes that can be upgraded in parallel.
                            Can be set to 0 or greater.
                          type: number
                      required:
                      - maxSurge
                      - maxUnavailable
                      type: object
                    type: array
                  version:
                    description: The Kubernetes version for the nodes in this pool.
                      Note that if this field and auto_upgrade are both specified,
                      they will fight each other for what the node version should
                      be, so setting both is highly discouraged. While a fuzzy version
                      can be specified, it's recommended that you specify explicit
                      versions as Terraform will see spurious diffs when fuzzy versions
                      are used. See the google_container_engine_versions data source's
                      version_prefix field to approximate fuzzy versions in a Terraform-compatible
                      way.
                    type: string
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: NodePoolStatus defines the observed state of NodePool.
            properties:
              atProvider:
                properties:
                  id:
                    type: string
                  instanceGroupUrls:
                    items:
                      type: string
                    type: array
                  managedInstanceGroupUrls:
                    items:
                      type: string
                    type: array
                  operation:
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
